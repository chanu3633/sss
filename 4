#include <stdio.h>
#include <stdbool.h>

#define V 5

// 그래프가 인접 행렬로 표현됩니다
int graph[V][V] = {
    {0, 1, 0, 1, 0},
    {1, 0, 1, 1, 1},
    {0, 1, 0, 0, 1},
    {1, 1, 0, 0, 1},
    {0, 1, 1, 1, 0}
};

// 해밀턴 회로를 저장하는 배열
int path[V];

// 해당 정점을 방문 가능한지 확인하는 함수
bool isSafe(int v, int graph[V][V], int path[], int pos) {
    // 현재 정점과 마지막 정점이 인접하지 않으면 false를 반환
    if (graph[path[pos - 1]][v] == 0)
        return false;

    // 현재 정점이 이미 경로에 포함되어 있으면 false를 반환
    for (int i = 0; i < pos; i++)
        if (path[i] == v)
            return false;

    return true;
}

// 해밀턴 회로를 찾기 위한 재귀 함수
bool hamCycleUtil(int graph[V][V], int path[], int pos) {
    // 모든 정점이 포함되어 있는지 확인
    if (pos == V) {
        // 마지막 정점이 처음 정점과 인접하면 true를 반환
        if (graph[path[pos - 1]][path[0]] == 1)
            return true;
        else
            return false;
    }

    // 각 정점을 경로에 추가
    for (int v = 1; v < V; v++) {
        // 정점 v가 추가 가능한지 확인
        if (isSafe(v, graph, path, pos)) {
            path[pos] = v;

            // 다음 정점으로 재귀 호출
            if (hamCycleUtil(graph, path, pos + 1) == true)
                return true;

            // 정점 v를 경로에서 제거 (백트래킹)
            path[pos] = -1;
        }
    }

    return false;
}

// 해밀턴 회로를 찾는 함수
bool hamCycle(int graph[V][V]) {
    for (int i = 0; i < V; i++)
        path[i] = -1;

    // 경로의 첫 번째 정점은 0으로 설정
    path[0] = 0;

    if (hamCycleUtil(graph, path, 1) == false) {
        printf("해밀턴 회로가 존재하지 않습니다.\n");
        return false;
    }

    printf("해밀턴 회로가 존재합니다: ");
    for (int i = 0; i < V; i++)
        printf("%d ", path[i]);

    // 회로를 완성하기 위해 시작점을 추가
    printf("%d\n", path[0]);

    return true;
}

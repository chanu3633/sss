void radixSort(int array[], int size) {
    int max = getMax(array, size);

    // 각 자릿수에 대해 계수 정렬을 수행
    for (int place = 1; max / place > 0; place *= 10) {
        countingSort(array, size, place);
    }
}

// 배열을 출력하는 함수
void printArray(int array[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");
}

int main() {
    int array[MAX] = {121, 432, 564, 23, 1, 45, 788, 67, 3, 9};
    int size = sizeof(array) / sizeof(array[0]);

    printf("정렬 전 배열: ");
    printArray(array, size);

    radixSort(array, size);

    printf("정렬 후 배열: ");
    printArray(array, size);

    return 0;
}

// 해밀턴 회로를 찾기 위한 재귀 함수
bool hamCycleUtil(int graph[V][V], int path[], int pos) {
    // 모든 정점이 포함되어 있는지 확인
    if (pos == V) {
        // 마지막 정점이 처음 정점과 인접하면 true를 반환
        if (graph[path[pos - 1]][path[0]] == 1)
            return true;
        else
            return false;
    }

    // 각 정점을 경로에 추가
    for (int v = 1; v < V; v++) {
        // 정점 v가 추가 가능한지 확인
        if (isSafe(v, graph, path, pos)) {
            path[pos] = v;

            // 다음 정점으로 재귀 호출
            if (hamCycleUtil(graph, path, pos + 1) == true)
                return true;

            // 정점 v를 경로에서 제거 (백트래킹)
            path[pos] = -1;
        }
    }

    return false;
}

// 해밀턴 회로를 찾는 함수
bool hamCycle(int graph[V][V]) {
    for (int i = 0; i < V; i++)
        path[i] = -1;

    // 경로의 첫 번째 정점은 0으로 설정
    path[0] = 0;

    if (hamCycleUtil(graph, path, 1) == false) {
        printf("해밀턴 회로가 존재하지 않습니다.\n");
        return false;
    }

    printf("해밀턴 회로가 존재합니다: ");
    for (int i = 0; i < V; i++)
        printf("%d ", path[i]);

    // 회로를 완성하기 위해 시작점을 추가
    printf("%d\n", path[0]);

    return true;
}
